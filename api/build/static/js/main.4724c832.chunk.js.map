{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Ingredient","Menu","Item","as","this","props","ingredient","name","spoken","React","Component","Ingredients","i","ingredients","forEach","push","key","Sidebar","icon","vertical","visible","List","Header","Instructions","steps","instructions","step","Content","divided","relaxed","App","state","error","isLoaded","recipe","fetch","then","res","json","setState","console","log","className","Grid","centered","columns","Column","Segment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"iUAKMA,E,uKAEF,OAAO,kBAACC,EAAA,EAAKC,KAAN,CAAWC,GAAG,KAClBC,KAAKC,MAAMC,WAAWC,KACvB,6BAFK,IAGHH,KAAKC,MAAMC,WAAWE,OAHnB,S,GAFcC,IAAMC,WAYzBC,E,uKAGF,IAAIC,EAAI,EACJC,EAAc,GAMlB,OALAT,KAAKC,MAAMQ,YAAYC,SAAQ,SAAAR,GAC7BO,EAAYE,KAAK,kBAAC,EAAD,CAAYT,WAAYA,EAAYU,IAAK,cAAcJ,KACxEA,GAAK,KAGC,kBAACK,EAAA,EAAD,CACNd,GAAIF,IACJiB,KAAK,UACLC,UAAQ,EACRC,SAAS,GAET,6BACA,kBAACC,EAAA,EAAKC,OAAN,KAAa,4CACZT,O,GAlBmBJ,IAAMC,WAwB1Ba,E,uKAEF,IAAIX,EAAI,EACJY,EAAQ,GAUZ,OATApB,KAAKC,MAAMoB,aAAaX,SAAQ,SAAAY,GAC9BF,EAAMT,KAAK,kBAACM,EAAA,EAAKnB,KAAN,CAAWc,IAAK,eAAeJ,GAExC,kBAACS,EAAA,EAAKM,QAAN,KACGf,EADH,KACQc,KAGVd,GAAK,KAEA,kBAACS,EAAA,EAAD,CAAMO,SAAO,EAACC,SAAO,GAC1B,kBAACR,EAAA,EAAKC,OAAN,KAAa,6CACZE,O,GAfoBf,IAAMC,WAsElBoB,E,kDA/Cb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IACD0B,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,OAAQ,MALO,E,gEASE,IAAD,OAKlBC,MAAM,GAAD,OAJM,0BAIN,mFACJC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAF,GACJ,EAAKK,SAAS,CACZN,UAAU,EACVC,OAAQA,S,+BAMZ,IAAIrB,EAAc,GACdY,EAAe,GAOnB,OAN0B,OAAtBrB,KAAK2B,MAAMG,SACbrB,EAAcT,KAAK2B,MAAMG,OAAOrB,YAChCY,EAAerB,KAAK2B,MAAMG,OAAOT,cAEnCe,QAAQC,IAAIrC,KAAK2B,MAAMG,QAEhB,yBAAKQ,UAAU,OAEpB,kBAACC,EAAA,EAAD,CAAMC,UAAQ,EAACC,QAAS,GACpB,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAAC,EAAD,CAAajC,YAAaA,IAC1B,kBAACkC,EAAA,EAAD,KACG,kBAAC,EAAD,CAActB,aAAcA,Y,GAzC3BhB,IAAMC,WClDJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLQ,QAAQR,MAAMA,EAAMgC,c","file":"static/js/main.4724c832.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Grid, List, Menu, Segment, Sidebar} from 'semantic-ui-react'\n\n\nclass Ingredient extends React.Component {\n  render(){\n    return <Menu.Item as='a'>\n      {this.props.ingredient.name}\n      <br/>\n      ({this.props.ingredient.spoken})\n    </Menu.Item>\n\n  }\n}\n\n\nclass Ingredients extends React.Component {\n  render(){\n\n    let i = 0;\n    let ingredients = []\n    this.props.ingredients.forEach(ingredient => {\n      ingredients.push(<Ingredient ingredient={ingredient} key={\"ingredient_\"+i}/>)\n      i += 1\n    })\n\n    return (<Sidebar\n      as={Menu}\n      icon='labeled'\n      vertical\n      visible={true}\n    >\n      <br/>\n      <List.Header><h3>Ingredients</h3></List.Header>\n      {ingredients}\n    </Sidebar>)\n  }\n}\n\n\nclass Instructions extends React.Component {\n  render() {\n    let i = 1;\n    let steps = []\n    this.props.instructions.forEach(step => {\n      steps.push(<List.Item key={\"instruction_\"+i}>\n\n        <List.Content>\n          {i}) {step}\n        </List.Content>\n      </List.Item>)\n      i += 1;\n    })\n    return <List divided relaxed>\n      <List.Header><h3>Instructions</h3></List.Header>\n      {steps}\n    </List>\n  }\n}\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      recipe: null\n    };\n  }\n\n  componentDidMount() {\n    let host = \"https://recipes.oram.ca\"\n    // if(window.location.hostname===\"localhost\")\n    //   host = \"http://localhost:5000\"\n\n    fetch(`${host}/api/v0/recipe/recipe_da2ddeea30c98822dbfa6182dc4f465a100e919d438691913bc8a1c7`)\n    .then(res => res.json())\n    .then(recipe => {\n      this.setState({\n        isLoaded: true,\n        recipe: recipe\n      });\n    })\n  }\n\n  render(){\n    let ingredients = [];\n    let instructions = [];\n    if (this.state.recipe !== null){\n      ingredients = this.state.recipe.ingredients\n      instructions = this.state.recipe.instructions\n    }\n    console.log(this.state.recipe)\n\n    return <div className=\"App\">\n\n      <Grid centered columns={2}>\n          <Grid.Column>\n              <Ingredients ingredients={ingredients} />\n              <Segment>\n                 <Instructions instructions={instructions} />\n              </Segment>\n          </Grid.Column>\n      </Grid>\n    </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}